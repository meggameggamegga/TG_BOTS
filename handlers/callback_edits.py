import re
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext

import config
from handlers import db
from keyboards.user_keyboard import cb, start_keyboard, cb_del, delete_task, cancel_keyboard
from main import dp

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
from misc.time_user import get_time_user
from states.state_user import AlertState


@dp.callback_query_handler(cb.filter(action='cancel'),state='*')
async def cancel_alert(call:types.CallbackQuery,state:FSMContext):
    await call.answer()
    await call.message.answer('–ó–∞–ø–∏—Å—å —Å–±—Ä–æ—à–µ–Ω–∞üëåüèª.',reply_markup=start_keyboard())
    await call.message.delete()
    await state.reset_state()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.callback_query_handler(cb_del.filter(action='deleted'),state='*')
async def deleted_notify(call:types.CallbackQuery,callback_data:dict):
    await call.answer()
    await db.del_task(callback_data.get('task'))
    await call.message.answer('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞')
    await call.message.delete()


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ (–∏–∑ main —É–¥–∞–ª–∏–ª db)
@dp.callback_query_handler(cb_del.filter(action='change_time'),state='*')
async def change_time(call:types.CallbackQuery,callback_data:dict,state:FSMContext):
    await call.answer()
    async with state.proxy() as data:
        data['alert_change'] = callback_data.get('task')
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≤–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏',reply_markup=cancel_keyboard())
    await AlertState.change_time.set()


@dp.message_handler(state=AlertState.change_time)
async def save_change_time(message:types.Message,state:FSMContext):
    msg = message.text
    # –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ï–°–Ø–¶.–î–ï–ù–¨ –ß–ê–°–´:–ú–ò–ù–£–¢–´
    if not re.match(r'[\d]{1,2}\.[\d]{1,2} [\d]{1,2}:[\d]{1,2}', msg):  # 12.05 00:55
        await message.answer(config.WTIME_WRONG, reply_markup=cancel_keyboard())
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        current_year = datetime.now().year
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ (–º–µ—Å—è—Ü —á–∏—Å–ª–æ —á–∞—Å—ã –º–∏–Ω—É—Ç—ã)
        user_time = get_time_user(message.text)
        # –°–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date_time_user = datetime(year=current_year,
                                  month=int(user_time[1]),
                                  day=int(user_time[0]),
                                  hour=int(user_time[2]),
                                  minute=int(user_time[3]),
                                  second=00)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º—è
        if date_time_user < datetime.now():
            await message.answer('–ö–∞–∂–µ—Ç—Å—è –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—Éüßê.', reply_markup=cancel_keyboard())
        else:
            async with state.proxy() as data:
                alert = data.get('alert_change')
                await db.change_time(date_time_user,message.from_user.id,alert)
            await message.answer('–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n'
                                 f'üìã–ó–∞–¥–∞—á–∞:{alert}\n'
                                 f'===‚è±–í—Ä–µ–º—è: {date_time_user}===', reply_markup=delete_task(alert))
            await state.finish() #

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.callback_query_handler(cb_del.filter(action='change_alert'),state='*')
async def change_alert(call:types.CallbackQuery,callback_data:dict,state:FSMContext):
    await call.answer()
    async with state.proxy() as data:
        data['change_alert'] = callback_data.get('task')
    await call.message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–∞–¥–∞—á–µ?')
    await call.message.delete()
    await AlertState.change_alert.set()


@dp.message_handler(state=AlertState.change_alert)
async def save_change_alert(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        alert = data.get('change_alert')
    time = await db.get_time(message.from_user.id,alert)
    await db.change_alert(message.text,message.from_user.id,time)
    await message.answer('–ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞')
    await state.finish()