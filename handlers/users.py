import asyncio
import logging
import re
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

import config
from main import dp
from services.sql import DataBase
from keyboards.user_keyboard import start_keyboard, cancel_keyboard, cb, delete_task, cb_del
from states.state_user import AlertState
from misc.time_user import get_time_user
from middlewares.middleware import rate_limit

db = DataBase(config.DATABASE)

@rate_limit(5)
@dp.message_handler(Command('start'))
async def start_user_cmnd(message:types.Message):
    if await db.user_exist(message.from_user.id): #–ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await message.answer(config.START_TEXT,reply_markup=start_keyboard()) #reply_markup - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
    else:
        try:
            await db.add_user(message.from_user.id, message.from_user.first_name)
        except Exception as e:
            logging.info(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞ {e}')
        finally:
            await message.answer(config.START_TEXT, reply_markup=start_keyboard())



#–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'
@dp.message_handler(text='üìù–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É',content_types='text')
async def start_task(message:types.Message):
    await message.answer(config.ALERT_TEXT,reply_markup=cancel_keyboard())
    await AlertState.alert.set()



#–õ—é–±–æ–π –∫–æ–Ω—Ç–µ–∫—Ç —Ç–∞–π–ø—Å , —Ñ–æ—Ç–æ —Ç–æ–∂–µ (–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
@dp.message_handler(state=AlertState.alert,content_types=types.ContentTypes.ANY)
async def save_alert(message:types.Message,state:FSMContext):
    if message.content_type != types.ContentType.TEXT:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.')
    else:
        async with state.proxy() as data:
            data['alert'] = message.text
        await message.answer(config.WTIME_TEXT,reply_markup=cancel_keyboard())

        await AlertState.time.set()




#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(content_types=types.ContentType.TEXT,state=AlertState.time)
async def save_time(message:types.Message,state:FSMContext):
    msg = message.text
    #–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ï–°–Ø–¶.–î–ï–ù–¨ –ß–ê–°–´:–ú–ò–ù–£–¢–´
    if not re.match(r'[\d]{1,2}\.[\d]{1,2} [\d]{1,2}:[\d]{1,2}',msg):
        await message.answer(config.WTIME_WRONG,reply_markup=cancel_keyboard())
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        current_year = datetime.now().year
        #–ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ (–º–µ—Å—è—Ü —á–∏—Å–ª–æ —á–∞—Å—ã –º–∏–Ω—É—Ç—ã)
        user_time = get_time_user(message.text)
        #–°–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date_time_user = datetime(year=current_year,
                                      month=int(user_time[1]),
                                      day=int(user_time[0]),
                                      hour=int(user_time[2]),
                                      minute=int(user_time[3]),
                                      second=00)
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º—è
        if date_time_user < datetime.now():
            await message.answer(config.WTIME_OLD,reply_markup=cancel_keyboard())
        else:
            async with state.proxy() as data:
                await db.add_new_task(message.from_user.id,data.get('alert'),date_time_user)
            await message.answer('<b>–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>'
                                 '\n'
                                 f'====‚è±–í—Ä–µ–º—è: {date_time_user}===='
                                 f'\n'
                                 f'üìã–ó–∞–¥–∞—á–∞: {data.get("alert")}',reply_markup=delete_task(data.get('alert')))
            await state.finish()


@dp.message_handler(text='‚≠ï–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏')
async def del_tasks(message:types.Message):
    await db.del_task_user(message.from_user.id)
    await message.answer('üë®‚Äçüíª–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!')



#–ú–æ–∏ –∑–∞–¥–∞—á–∏
@dp.message_handler(text='üìÅ–ú–æ–∏ –∑–∞–¥–∞—á–∏')
async def my_tasks(message:types.Message):
    data_task = await db.get_all_notify(message.from_user.id)
    if data_task:
        for data in data_task:
            alert = data[0]
            time = data[1]
            await message.answer(f'üìä<b>–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏</b>'
                                 f'\n'
                                 f'====–í–†–ï–ú–Øüïò===='
                                 f'\n'
                                 f'{time}'
                                 f'\n'
                                 f'====–ó–ê–î–ê–ß–êüìã===='
                                 f'\n'
                                 f'{alert}',reply_markup=delete_task(alert))
    else:
        await message.answer(config.MY_TASKS_NO,reply_markup=start_keyboard())

@rate_limit(5)
@dp.message_handler()
async def other_cmnd(message:types.Message):
    await message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é')




